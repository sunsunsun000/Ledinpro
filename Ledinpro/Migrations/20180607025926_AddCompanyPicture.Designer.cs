// <auto-generated />
using Ledinpro.Data;
using Ledinpro.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Ledinpro.Migrations
{
    [DbContext(typeof(LedinproContext))]
    [Migration("20180607025926_AddCompanyPicture")]
    partial class AddCompanyPicture
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Ledinpro.Models.Carousel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateDateTime");

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(16);

                    b.Property<string>("Description")
                        .HasMaxLength(1024);

                    b.Property<string>("MobilePicturePath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("PicturePath")
                        .IsRequired();

                    b.Property<int?>("RelativeProductId");

                    b.Property<int>("SortNumber");

                    b.Property<string>("Title")
                        .HasMaxLength(1024);

                    b.Property<int?>("Type");

                    b.HasKey("Id");

                    b.ToTable("Carousel");
                });

            modelBuilder.Entity("Ledinpro.Models.CompanyInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1024);

                    b.Property<string>("BackgroundImage");

                    b.Property<DateTime?>("CreateDateTime");

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(16);

                    b.Property<string>("Description")
                        .IsRequired();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("FreeOne");

                    b.Property<string>("FreeThree");

                    b.Property<string>("FreeTwo");

                    b.Property<string>("MobileBackgroundImage");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("CompanyInfo");
                });

            modelBuilder.Entity("Ledinpro.Models.Logo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<DateTime?>("CreateDateTime");

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(16);

                    b.Property<string>("LogoPath");

                    b.Property<string>("LogoType");

                    b.HasKey("Id");

                    b.ToTable("Logo");
                });

            modelBuilder.Entity("Ledinpro.Models.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<DateTime?>("CreateDateTime");

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(16);

                    b.Property<string>("Link")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("Sortnumber");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.HasKey("Id");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("Ledinpro.Models.News", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(16);

                    b.Property<string>("BackgroundPicture");

                    b.Property<string>("Content")
                        .IsRequired();

                    b.Property<DateTime?>("CreateDateTime");

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(16);

                    b.Property<string>("MobileBackgroundPicture");

                    b.Property<string>("MobilePicture");

                    b.Property<string>("Picture");

                    b.Property<int?>("ProductType");

                    b.Property<bool?>("PublishOrNot");

                    b.Property<DateTime?>("PublishTime");

                    b.Property<int?>("Sortnumber");

                    b.Property<string>("SubTitle")
                        .HasMaxLength(255);

                    b.Property<string>("Thumbnail");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("News");
                });

            modelBuilder.Entity("Ledinpro.Models.PreviewProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateDateTime");

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(16);

                    b.Property<string>("MobilePicturePath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("PicturePath");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("PreviewProduct");
                });

            modelBuilder.Entity("Ledinpro.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BackgroundPicturePath");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<DateTime?>("CreateDateTime");

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(16);

                    b.Property<string>("Description");

                    b.Property<string>("Dimming")
                        .HasMaxLength(64);

                    b.Property<string>("Efficient")
                        .HasMaxLength(64);

                    b.Property<string>("Heat")
                        .HasMaxLength(64);

                    b.Property<string>("InputPower")
                        .HasMaxLength(64);

                    b.Property<string>("InputVoltage")
                        .HasMaxLength(64);

                    b.Property<string>("LightingAngle")
                        .HasMaxLength(64);

                    b.Property<string>("Lumen")
                        .HasMaxLength(64);

                    b.Property<string>("MobilePicturePath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<string>("OutputPower")
                        .HasMaxLength(64);

                    b.Property<string>("OutputVoltage")
                        .HasMaxLength(64);

                    b.Property<string>("PicturePath");

                    b.Property<string>("Power")
                        .HasMaxLength(64);

                    b.Property<string>("Ppf")
                        .HasMaxLength(64);

                    b.Property<string>("ProductDatasheet");

                    b.Property<string>("ProductGuide");

                    b.Property<string>("ProductIES");

                    b.Property<string>("ProductInstallationGuide");

                    b.Property<int>("ProductSceneId");

                    b.Property<string>("SceneName")
                        .HasMaxLength(64);

                    b.Property<string>("ScenePicturePath");

                    b.Property<string>("Specification");

                    b.Property<string>("Spectrum");

                    b.Property<int>("Type");

                    b.Property<string>("Weight")
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("Ledinpro.Models.ProductComment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Comment")
                        .IsRequired();

                    b.Property<DateTime?>("CreateDateTime");

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(16);

                    b.Property<int>("ProductId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductComment");
                });

            modelBuilder.Entity("Ledinpro.Models.ProductFeature", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateDateTime");

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(16);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("PicturePath");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductFeature");
                });

            modelBuilder.Entity("Ledinpro.Models.ProductFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateDateTime");

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(16);

                    b.Property<string>("FilePath");

                    b.Property<int>("FileTpye");

                    b.Property<int>("ProductId");

                    b.Property<string>("Version")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductFile");
                });

            modelBuilder.Entity("Ledinpro.Models.ProductScene", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateDateTime");

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(16);

                    b.Property<string>("Description")
                        .HasMaxLength(1024);

                    b.Property<string>("MobilePicturePath");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255);

                    b.Property<string>("PicturePath");

                    b.Property<string>("ProductApplicationScene");

                    b.Property<int?>("Type");

                    b.HasKey("Id");

                    b.ToTable("ProductScene");
                });

            modelBuilder.Entity("Ledinpro.Models.ProductSceneProduct", b =>
                {
                    b.Property<int>("ProductSceneId");

                    b.Property<int>("ProductId");

                    b.HasKey("ProductSceneId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductSceneProduct");
                });

            modelBuilder.Entity("Ledinpro.Models.SaleContactInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreateDateTime");

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(16);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<bool>("IsShow");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("NickName")
                        .HasMaxLength(64);

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("PicturePath");

                    b.Property<string>("Skype")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.HasKey("Id");

                    b.ToTable("SaleContactInfo");
                });

            modelBuilder.Entity("Ledinpro.Models.SubProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("ColorAngle")
                        .HasMaxLength(64);

                    b.Property<DateTime?>("CreateDateTime");

                    b.Property<string>("CreateUserName")
                        .HasMaxLength(16);

                    b.Property<string>("Dimming")
                        .HasMaxLength(64);

                    b.Property<string>("Efficient")
                        .HasMaxLength(64);

                    b.Property<string>("InputPower")
                        .HasMaxLength(64);

                    b.Property<string>("Lumen")
                        .HasMaxLength(64);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(64);

                    b.Property<string>("OutputPower")
                        .HasMaxLength(64);

                    b.Property<string>("PicturePath");

                    b.Property<string>("Power")
                        .HasMaxLength(64);

                    b.Property<int>("ProductId");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("SubProduct");
                });

            modelBuilder.Entity("Ledinpro.Models.PreviewProduct", b =>
                {
                    b.HasOne("Ledinpro.Models.Product", "Product")
                        .WithMany("PreviewProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ledinpro.Models.ProductComment", b =>
                {
                    b.HasOne("Ledinpro.Models.Product")
                        .WithMany("ProductComments")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ledinpro.Models.ProductFeature", b =>
                {
                    b.HasOne("Ledinpro.Models.Product", "Product")
                        .WithMany("ProductFeatures")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ledinpro.Models.ProductFile", b =>
                {
                    b.HasOne("Ledinpro.Models.Product", "Product")
                        .WithMany("ProductFiles")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ledinpro.Models.ProductSceneProduct", b =>
                {
                    b.HasOne("Ledinpro.Models.Product", "Product")
                        .WithMany("ProductSceneProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Ledinpro.Models.ProductScene", "ProductScene")
                        .WithMany("ProductSceneProducts")
                        .HasForeignKey("ProductSceneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Ledinpro.Models.SubProduct", b =>
                {
                    b.HasOne("Ledinpro.Models.Product", "Product")
                        .WithMany("SubProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
